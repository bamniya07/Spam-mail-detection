# -*- coding: utf-8 -*-
"""Copy of Spam-Mail-Prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWWCTi9Sr600bqc6mmPJLDLbjp2Tis2g

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection and Pre Processing"""

# Loading the data from csv file to pandas Dataframe

raw_mail_data=pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# Replacing the null value with a null string

mail_data=raw_mail_data.where((pd.notnull(raw_mail_data)),'')

#Printing the first five rows of the mail datad
mail_data.head()

#Printing the  no of rows and columns

mail_data.shape

"""LABEL ENCODING"""

# Label spam mail as 0; and ham mail as 1
mail_data.loc[mail_data["Category"] == "spam","Category",] = 0
mail_data.loc[mail_data["Category"] == "ham","Category",] = 1

# Separate the text and the label data

X= mail_data['Message']
Y= mail_data['Category']

print(X)
print(Y)

"""Splitting the data for traing and testing"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

# Transform the text data to features vector that can be used as input to logistic regression

feature_extraction= TfidfVectorizer(min_df = 1, stop_words='english' , lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features =feature_extraction.transform(X_test)

# Converting the Y_tain and Y_test as a int type
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""Traing Model"""

model = LogisticRegression()

# Training the model using Logistic Regression Clssifier

model.fit(X_train_features, Y_train)

"""Evaluate the Trainied Modele"""

#Prediction using the training data

predition_training_data = model.predict(X_train_features)
accuracy_traing_data = accuracy_score(Y_train, predition_training_data)

print("Prediction using the Training data : ",accuracy_traing_data)

#Prediction using the test data
predition_test_data = model.predict(X_test_features)
accuracy_test_data = accuracy_score(Y_test, predition_test_data)

print("Prediction using the Test data : ", accuracy_test_data)

